// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package day18

import (
	"strings"
	"testing"

	"github.com/fis/aoc/util"
)

func TestSum(t *testing.T) {
	tests := []struct {
		input []string
		want  string
	}{
		{
			input: []string{
				`[[[[4,3],4],4],[7,[[8,4],9]]]`,
				`[1,1]`,
			},
			want: `[[[[0,7],4],[[7,8],[6,0]]],[8,1]]`,
		},
		{
			input: []string{
				`[1,1]`,
				`[2,2]`,
				`[3,3]`,
				`[4,4]`,
			},
			want: `[[[[1,1],[2,2]],[3,3]],[4,4]]`,
		},
		{
			input: []string{
				`[1,1]`,
				`[2,2]`,
				`[3,3]`,
				`[4,4]`,
				`[5,5]`,
			},
			want: `[[[[3,0],[5,3]],[4,4]],[5,5]]`,
		},
		{
			input: []string{
				`[1,1]`,
				`[2,2]`,
				`[3,3]`,
				`[4,4]`,
				`[5,5]`,
				`[6,6]`,
			},
			want: `[[[[5,0],[7,4]],[5,5]],[6,6]]`,
		},
		{
			input: []string{
				`[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]`,
				`[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]`,
				`[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]`,
				`[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]`,
				`[7,[5,[[3,8],[1,4]]]]`,
				`[[2,[2,2]],[8,[8,1]]]`,
				`[2,9]`,
				`[1,[[[9,3],9],[[9,0],[0,7]]]]`,
				`[[[5,[7,4]],7],1]`,
				`[[[[4,2],2],6],[8,7]]`,
			},
			want: `[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]`,
		},
		{
			input: []string{
				`[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]`,
				`[[[5,[2,8]],4],[5,[[9,9],0]]]`,
				`[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]`,
				`[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]`,
				`[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]`,
				`[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]`,
				`[[[[5,4],[7,7]],8],[[8,3],8]]`,
				`[[9,3],[[9,9],[6,[4,9]]]]`,
				`[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]`,
				`[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]`,
			},
			want: `[[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]]`,
		},
	}
	for _, test := range tests {
		input, _ := parseNumbers(test.input)
		sum, tmp := &snailNumber{}, &snailNumber{}
		sum.add(&input[0], &input[1])
		for i := 2; i < len(input); i++ {
			tmp.add(sum, &input[i])
			sum, tmp = tmp, sum
		}
		if got := sum.format(); got != test.want {
			t.Errorf("sum(%v) = %s, want %s", test.input, got, test.want)
		}
	}
}

func TestReduce(t *testing.T) {
	input := `[[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]`
	want := `[[[[0,7],4],[[7,8],[6,0]]],[8,1]]`
	var sn snailNumber
	sn.parse(input)
	sn.reduce()
	if got := sn.format(); got != want {
		t.Errorf("reduce(%s) -> %s, want %s", input, got, want)
	}
}

func TestExplode(t *testing.T) {
	tests := []struct {
		input string
		want  string
	}{
		{input: `[[[[[9,8],1],2],3],4]`, want: `[[[[0,9],2],3],4]`},
		{input: `[7,[6,[5,[4,[3,2]]]]]`, want: `[7,[6,[5,[7,0]]]]`},
		{input: `[[6,[5,[4,[3,2]]]],1]`, want: `[[6,[5,[7,0]]],3]`},
		{input: `[[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]`, want: `[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]`},
		{input: `[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]`, want: `[[3,[2,[8,0]]],[9,[5,[7,0]]]]`},
	}
	for _, test := range tests {
		var sn snailNumber
		sn.parse(test.input)
		sn.explode(0)
		if got := sn.format(); got != test.want {
			t.Errorf("%s.explode -> %s, want %s", test.input, got, test.want)
		}
	}
}

func TestMagnitude(t *testing.T) {
	tests := []struct {
		input string
		want  int
	}{
		{input: `[9,1]`, want: 29},
		{input: `[1,9]`, want: 21},
		{input: `[[9,1],[1,9]]`, want: 129},
		{input: `[[1,2],[[3,4],5]]`, want: 143},
		{input: `[[[[0,7],4],[[7,8],[6,0]]],[8,1]]`, want: 1384},
		{input: `[[[[1,1],[2,2]],[3,3]],[4,4]]`, want: 445},
		{input: `[[[[3,0],[5,3]],[4,4]],[5,5]]`, want: 791},
		{input: `[[[[5,0],[7,4]],[5,5]],[6,6]]`, want: 1137},
		{input: `[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]`, want: 3488},
		{input: `[[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]]`, want: 4140},
	}
	for _, test := range tests {
		var sn snailNumber
		sn.parse(test.input)
		if got := sn.magnitude(0); got != test.want {
			t.Errorf("%s.magnitude(0) = %d, want %d", test.input, got, test.want)
		}
	}
}

func TestSnailNumberIO(t *testing.T) {
	var sn snailNumber
	for _, test := range allTheNumbers {
		sn.parse(test)
		if got := sn.format(); got != test {
			t.Errorf("%s -> %s, expected no change", test, got)
		}
	}
}

var allTheNumbers = util.Lines(strings.TrimPrefix(`
1
2
4
9
[[[[0,7],4],[[7,8],[6,0]]],[8,1]]
[[[[0,7],4],[[7,8],[6,0]]],[8,1]]
[[[[0,9],2],3],4]
[[[[1,1],[2,2]],[3,3]],[4,4]]
[[[[1,1],[2,2]],[3,3]],[4,4]]
[[[[1,2],[3,4]],[[5,6],[7,8]]],9]
[[[[1,3],[5,3]],[[1,3],[8,7]]],[[[4,9],[6,9]],[[8,2],[7,3]]]]
[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]
[[[[3,0],[5,3]],[4,4]],[5,5]]
[[[[3,0],[5,3]],[4,4]],[5,5]]
[[[[4,2],2],6],[8,7]]
[[[[4,3],4],4],[7,[[8,4],9]]]
[[[[5,0],[7,4]],[5,5]],[6,6]]
[[[[5,0],[7,4]],[5,5]],[6,6]]
[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]
[[[[5,4],[7,7]],8],[[8,3],8]]
[[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]]
[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]
[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]
[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]
[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
[[[5,[2,8]],4],[5,[[9,9],0]]]
[[[5,[7,4]],7],1]
[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
[[[9,[3,8]],[[0,9],6]],[[[3,7],[4,9]],3]]
[[1,2],[[3,4],5]]
[[1,2],[[3,4],5]]
[[1,2],3]
[[1,9],[8,5]]
[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]
[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
[[2,[2,2]],[8,[8,1]]]
[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]
[[3,[2,[8,0]]],[9,[5,[7,0]]]]
[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
[[6,[5,[7,0]]],3]
[[9,1],[1,9]]
[[9,3],[[9,9],[6,[4,9]]]]
[1,[[[9,3],9],[[9,0],[0,7]]]]
[1,1]
[1,2]
[1,9]
[2,2]
[2,9]
[3,3]
[4,4]
[5,5]
[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
[6,6]
[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]
[7,[5,[[3,8],[1,4]]]]
[7,[6,[5,[7,0]]]]
[9,[8,7]]
[9,1]
`, "\n"))
