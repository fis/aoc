  jp solve

include 'add_u32.z80'
include 'add_u32x8.z80'
include 'write_u32.z80'

solve:

  ld ix, card_counts

  ;; discard the card prefix (and detect EOF)

.process_card:

  in a, (1)
  or a
  jp z, sum_cards
.cards_remain:
  in a, (1)
  cp ':'
  jr nz, .cards_remain

  ;; clear and then mark winning numbers in the bitmap

  ld hl, blank
  ld de, bitmap
  ld bc, 10*16  ;; treating input as hex for simplicity
  ldir

.read_winner:
  in a, (1)
  cp ' '
  jr z, .read_winner
  cp '|'
  jr z, .winners_done
  call atoi2
  ld (hl), 0xff
  jr .read_winner
.winners_done:

  ;; for each winning number, add current card count to a new card count

  ld a, 1
  call add_u32x8

  push ix
  pop iy
  ld de, 4
  add ix, de
  push ix

.read_num:
  in a, (1)
  cp ' '
  jr z, .read_num
  call atoi2
  bit 0, (hl)
  jr z, .no_win
  call add_u32
  add ix, de
.no_win:
  ld a, b
  cp '\n'
  jr nz, .read_num

  ld ix, total_sum
  call add_u32
  pop ix

  jr .process_card

sum_cards:
  ld ix, total_sum
  call write_u32
  ld a, '\n'
  out (1), a
  halt

;;; atoi2 - read a 1- or 2-digit decimal number
;;;  in: A - first digit
;;; out: L - decoded number
;;;      B - character after the digits
atoi2:
  sub '0'
  ld l, a
  in a, (1)
  ld b, a
  sub '0'
  jr c, .atoi2done
  cp 10
  jr nc, .atoi2done
  sla l
  sla l
  sla l
  sla l
  add l
  ld l, a
  in a, (1)
  ld b, a
.atoi2done:
  ret

total_sum: equ 0x1000
card_counts: equ 0x2000
blank: equ 0x8000-10*16
bitmap: equ 0x8000
